{%- set cc = cookiecutter -%}
# PIPELINE----------------------------------------------------------------------
stages:
  - build
  - test
  - master
  - pages
  - prod

# Please setup a project or group access token in GitLab:
#  - name: GIT_ACCESS_TOKEN
#  - scopes: write_repository
#  - role: maintainer
#  - name: PYPI_ACCESS_TOKEN
#  - scopes: api, api_read
#  - role: maintainer
# Please setup a CI/CD variable:
#  - name: GIT_ACCESS_TOKEN
#  - value: value of git access token
#  - name: PYPI_ACCESS_TOKEN
#  - value: value of pypi access token
variables:
  repo: "$CI_PROJECT_NAME"
  cli: "bin/$repo"
  org: "{{ cc.git_organization }}"
  org_url: "{{ cc.organization_url }}"
  git_url: "https://gitlab-ci-token:$GIT_ACCESS_TOKEN@gitlab.com/$org/$repo.git"

.build-env:
  image:
    name: cruizba/ubuntu-dind:latest
  services:
    - name: docker:23.0.6-dind
      alias: dockerdaemon
  variables:
    DOCKER_HOST: tcp://dockerdaemon:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - export timestamp=`echo $CI_PIPELINE_CREATED_AT | sed 's/:/-/g'`
    - export test_image="$CI_REGISTRY/$org/$repo:test-$timestamp"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apt update
    - apt install -y git
    - git config --global user.name devops
    - git config --global user.email "devops@$org_url"
    - git remote set-url origin $git_url

# FEATURE-----------------------------------------------------------------------
.feature-env:
  extends: .build-env
  rules:
    - if: >-
        $CI_PIPELINE_SOURCE == 'merge_request_event' &&
        $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'master' &&
        $CI_COMMIT_BRANCH != 'master' &&
        $CI_COMMIT_BRANCH != 'prod'

build:
  stage: build
  extends: .feature-env
  script:
    - $($cli docker-pull-dev) || echo "docker image not found"
    - $cli docker-build-from-cache
    - docker tag $repo:dev $test_image
    - docker push $test_image

docs:
  stage: test
  extends: .feature-env
  script:
    - docker pull $test_image
    - docker tag $test_image $repo:dev
    - $cli docker-start
    - $cli docs
    - $cli docs-metrics
    - $cli docs-architecture

lint:
  stage: test
  extends: .feature-env
  script:
    - docker pull $test_image
    - docker tag $test_image $repo:dev
    - $cli docker-start
    - $cli test-lint

test:
  stage: test
  extends: .feature-env
  script:
    - docker pull $test_image
    - docker tag $test_image $repo:dev
    - $cli docker-start
    - $cli test-coverage

# MASTER------------------------------------------------------------------------
.master-rules:
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'

master:
  stage: master
  extends:
    - .build-env
    - .master-rules
  script:
    - $cli docker-build
    - git pull origin master
    - $cli version-bump-patch
    - $cli version
    - $cli version-commit
    - $cli docker-push-dev
    - $cli docker-push-dev-latest

pages:
  extends: .master-rules
  stage: pages
  script: echo 'Updating GitLab Pages'
  artifacts:
    paths:
      - public

# PROD--------------------------------------------------------------------------
prod:
  stage: prod
  extends: .build-env
  rules:
    - if: $CI_COMMIT_BRANCH == 'prod'
  script:
    - $cli docker-pull-dev
{%- if cc.docker_registry == 'gitlab' %}
    - docker tag registry.gitlab.com/$org/$repo:dev-latest $repo:dev
{%- else %}
    - docker tag $repo:dev-latest $repo:dev
{%- endif %}
    - $cli docker-start
    - $cli library-install-prod
    - $cli test-prod
    - $cli build-publish -a "$PYPI_ACCESS_TOKEN"
    - $cli docker-build-prod -a "$PYPI_ACCESS_TOKEN"
    - $cli docker-push-prod
    - $cli docker-push-prod-latest
